{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/udochiokeke/Documents/GitHub/romancequiz.github.io/src/app/components/Demo.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport sdk, { FrameContext } from '@farcaster/frame-sdk';\n\nexport default function Demo() {\n  const [isSDKLoaded, setIsSDKLoaded] = useState(false);\n  const [setContext] = useState<FrameContext>(any);\n\n \n\n  useEffect(() => {\n    const load = async () => {\n      setContext(await sdk.context);\n      sdk.actions.ready();\n    };\n    if (sdk && !isSDKLoaded) {\n      setIsSDKLoaded(true);\n      load();\n    }\n  }, [isSDKLoaded]);\n\n  if (!isSDKLoaded) {\n    return <div>Loading...</div>;\n  }\n  \n  const [quizData, setQuizData] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]); // store selected answers\n  const [isQuizComplete, setIsQuizComplete] = useState(false);\n\n  \n\n  useEffect(() => {\n    // Fetch quiz data from public folder (or you could embed it directly)\n    fetch('/quiz.json')\n      .then((res) => res.json())\n      .then((data) => {\n        setQuizData(data);\n        // Initialize userAnswers to match number of questions\n        setUserAnswers(Array(data.questions.length).fill(null));\n      })\n      .catch((err) => {\n        console.error('Failed to load quiz:', err);\n      });\n  }, []);\n\n  if (!quizData) {\n    return <p style={styles.loading}>Loading quiz...</p>;\n  }\n\n  const handleAnswerClick = (answerIndex) => {\n    // Store the user's choice for this question\n    const updatedAnswers = [...userAnswers];\n    updatedAnswers[currentQuestionIndex] = answerIndex;\n    setUserAnswers(updatedAnswers);\n\n    // Move to the next question or complete the quiz\n    if (currentQuestionIndex < quizData.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      setIsQuizComplete(true);\n    }\n  };\n\n  // If the quiz is complete, calculate the score\n  if (isQuizComplete) {\n    const totalQuestions = quizData.questions.length;\n    const correctCount = quizData.questions.reduce((count, q, idx) => {\n      const userAnswer = userAnswers[idx];\n      return userAnswer === q.correctAnswerIndex ? count + 1 : count;\n    }, 0);\n\n    // Calculate the percentage of correct answers\n    const scorePercentage = Math.round((correctCount / totalQuestions) * 100);\n\n    return (\n      <div style={styles.container}>\n        <h1 style={styles.title}>Romance vs HODL Quiz</h1>\n        <p style={styles.finalText}>\n          You are {scorePercentage}% unworthy to be in a relationship.\n        </p>\n      </div>\n    );\n  }\n\n  // Otherwise, show the current question\n  const questionObj = quizData.questions[currentQuestionIndex];\n\n  return (\n    <div style={styles.container}>\n      <h1 style={styles.title}>Romance vs HODL Quiz</h1>\n      <p style={styles.description}>{quizData.shortDescription}</p>\n      <div style={styles.questionCard}>\n        <h3 style={styles.questionTitle}>\n          Question {currentQuestionIndex + 1} of {quizData.questions.length}\n        </h3>\n        <p style={styles.questionText}>{questionObj.question}</p>\n        <div style={styles.answersContainer}>\n          {questionObj.answers.map((answer, index) => (\n            <button\n              key={index}\n              style={styles.answerButton}\n              onClick={() => handleAnswerClick(index)}\n            >\n              {answer}\n            </button>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    fontFamily: 'sans-serif',\n    maxWidth: '600px',\n    margin: '50px auto',\n    padding: '1rem',\n  },\n  title: {\n    textAlign: 'center',\n  },\n  description: {\n    marginBottom: '2rem',\n    textAlign: 'center',\n  },\n  loading: {\n    textAlign: 'center',\n    marginTop: '50px',\n  },\n  questionCard: {\n    border: '1px solid #ccc',\n    borderRadius: '8px',\n    padding: '1rem',\n    marginBottom: '1rem',\n  },\n  questionTitle: {\n    margin: 0,\n    marginBottom: '0.75rem',\n  },\n  questionText: {\n    margin: 0,\n    marginBottom: '1rem',\n  },\n  answersContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: '0.5rem',\n  },\n  answerButton: {\n    padding: '0.75rem 1rem',\n    fontSize: '1rem',\n    cursor: 'pointer',\n    borderRadius: '4px',\n    border: '1px solid #444',\n    backgroundColor: 'blue',\n    textAlign: 'left',\n  },\n  finalText: {\n    textAlign: 'center',\n    fontSize: '1.2rem',\n    fontWeight: 'bold',\n  },\n};"],"names":[],"mappings":"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"}},
    {"offset": {"line": 266, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}