{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/udochiokeke/Documents/GitHub/romancequiz.github.io/lib/connector.ts"],"sourcesContent":["import sdk from '@farcaster/frame-sdk';\nimport { SwitchChainError, fromHex, getAddress, numberToHex } from 'viem';\nimport { ChainNotConfiguredError, createConnector } from 'wagmi';\n\nframeConnector.type = 'frameConnector' as const;\n\nexport function frameConnector() {\n  let connected = true;\n\n  return createConnector<typeof sdk.wallet.ethProvider>((config) => ({\n    id: 'farcaster',\n    name: 'Farcaster Wallet',\n    type: frameConnector.type,\n\n    async setup() {\n      this.connect({ chainId: config.chains[0].id });\n    },\n    async connect({ chainId } = {}) {\n      const provider = await this.getProvider();\n      const accounts = await provider.request({\n        method: 'eth_requestAccounts',\n      });\n\n      let currentChainId = await this.getChainId();\n      if (chainId && currentChainId !== chainId) {\n        const chain = await this.switchChain!({ chainId });\n        currentChainId = chain.id;\n      }\n\n      connected = true;\n\n      return {\n        accounts: accounts.map((x) => getAddress(x)),\n        chainId: currentChainId,\n      };\n    },\n    async disconnect() {\n      connected = false;\n    },\n    async getAccounts() {\n      if (!connected) throw new Error('Not connected');\n      const provider = await this.getProvider();\n      const accounts = await provider.request({\n        method: 'eth_requestAccounts',\n      });\n      return accounts.map((x) => getAddress(x));\n    },\n    async getChainId() {\n      const provider = await this.getProvider();\n      const hexChainId = await provider.request({ method: 'eth_chainId' });\n      return fromHex(hexChainId, 'number');\n    },\n    async isAuthorized() {\n      if (!connected) {\n        return false;\n      }\n\n      const accounts = await this.getAccounts();\n      return !!accounts.length;\n    },\n    async switchChain({ chainId }) {\n      const provider = await this.getProvider();\n      const chain = config.chains.find((x) => x.id === chainId);\n      if (!chain) throw new SwitchChainError(new ChainNotConfiguredError());\n\n      await provider.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: numberToHex(chainId) }],\n      });\n      return chain;\n    },\n    onAccountsChanged(accounts) {\n      if (accounts.length === 0) this.onDisconnect();\n      else\n        config.emitter.emit('change', {\n          accounts: accounts.map((x) => getAddress(x)),\n        });\n    },\n    onChainChanged(chain) {\n      const chainId = Number(chain);\n      config.emitter.emit('change', { chainId });\n    },\n    async onDisconnect() {\n      config.emitter.emit('disconnect');\n      connected = false;\n    },\n    async getProvider() {\n      return sdk.wallet.ethProvider;\n    },\n  }));\n}"],"names":[],"mappings":";;;AAAA;AAEA;AADA;AAAA;AAAA;AACA;AADA;AADA;;;;AAIA,eAAe,IAAI,GAAG;AAEf,SAAS;IACd,IAAI,YAAY;IAEhB,OAAO,CAAA,GAAA,kLAAA,CAAA,kBAAe,AAAD,EAAiC,CAAC,SAAW,CAAC;YACjE,IAAI;YACJ,MAAM;YACN,MAAM,eAAe,IAAI;YAEzB,MAAM;gBACJ,IAAI,CAAC,OAAO,CAAC;oBAAE,SAAS,OAAO,MAAM,CAAC,EAAE,CAAC,EAAE;gBAAC;YAC9C;YACA,MAAM,SAAQ,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;gBAC5B,MAAM,WAAW,MAAM,IAAI,CAAC,WAAW;gBACvC,MAAM,WAAW,MAAM,SAAS,OAAO,CAAC;oBACtC,QAAQ;gBACV;gBAEA,IAAI,iBAAiB,MAAM,IAAI,CAAC,UAAU;gBAC1C,IAAI,WAAW,mBAAmB,SAAS;oBACzC,MAAM,QAAQ,MAAM,IAAI,CAAC,WAAW,CAAE;wBAAE;oBAAQ;oBAChD,iBAAiB,MAAM,EAAE;gBAC3B;gBAEA,YAAY;gBAEZ,OAAO;oBACL,UAAU,SAAS,GAAG,CAAC,CAAC,IAAM,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD,EAAE;oBACzC,SAAS;gBACX;YACF;YACA,MAAM;gBACJ,YAAY;YACd;YACA,MAAM;gBACJ,IAAI,CAAC,WAAW,MAAM,IAAI,MAAM;gBAChC,MAAM,WAAW,MAAM,IAAI,CAAC,WAAW;gBACvC,MAAM,WAAW,MAAM,SAAS,OAAO,CAAC;oBACtC,QAAQ;gBACV;gBACA,OAAO,SAAS,GAAG,CAAC,CAAC,IAAM,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD,EAAE;YACxC;YACA,MAAM;gBACJ,MAAM,WAAW,MAAM,IAAI,CAAC,WAAW;gBACvC,MAAM,aAAa,MAAM,SAAS,OAAO,CAAC;oBAAE,QAAQ;gBAAc;gBAClE,OAAO,CAAA,GAAA,+JAAA,CAAA,UAAO,AAAD,EAAE,YAAY;YAC7B;YACA,MAAM;gBACJ,IAAI,CAAC,WAAW;oBACd,OAAO;gBACT;gBAEA,MAAM,WAAW,MAAM,IAAI,CAAC,WAAW;gBACvC,OAAO,CAAC,CAAC,SAAS,MAAM;YAC1B;YACA,MAAM,aAAY,EAAE,OAAO,EAAE;gBAC3B,MAAM,WAAW,MAAM,IAAI,CAAC,WAAW;gBACvC,MAAM,QAAQ,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK;gBACjD,IAAI,CAAC,OAAO,MAAM,IAAI,gJAAA,CAAA,mBAAgB,CAAC,IAAI,qKAAA,CAAA,0BAAuB;gBAElE,MAAM,SAAS,OAAO,CAAC;oBACrB,QAAQ;oBACR,QAAQ;wBAAC;4BAAE,SAAS,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD,EAAE;wBAAS;qBAAE;gBAC7C;gBACA,OAAO;YACT;YACA,mBAAkB,QAAQ;gBACxB,IAAI,SAAS,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY;qBAE1C,OAAO,OAAO,CAAC,IAAI,CAAC,UAAU;oBAC5B,UAAU,SAAS,GAAG,CAAC,CAAC,IAAM,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD,EAAE;gBAC3C;YACJ;YACA,gBAAe,KAAK;gBAClB,MAAM,UAAU,OAAO;gBACvB,OAAO,OAAO,CAAC,IAAI,CAAC,UAAU;oBAAE;gBAAQ;YAC1C;YACA,MAAM;gBACJ,OAAO,OAAO,CAAC,IAAI,CAAC;gBACpB,YAAY;YACd;YACA,MAAM;gBACJ,OAAO,+KAAA,CAAA,UAAG,CAAC,MAAM,CAAC,WAAW;YAC/B;QACF,CAAC;AACH"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":["file:///Users/udochiokeke/Documents/GitHub/romancequiz.github.io/components/providers/WagmiProvider.tsx"],"sourcesContent":["import { createConfig, http, WagmiProvider } from 'wagmi';\nimport { base } from 'wagmi/chains';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { frameConnector } from '../../lib/connector';\n\nexport const config = createConfig({\n  chains: [base],\n  transports: {\n    [base.id]: http(),\n  },\n  connectors: [frameConnector()],\n});\n\nconst queryClient = new QueryClient();\n\nexport default function Provider({ children }: { children: React.ReactNode }) {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n    </WagmiProvider>\n  );\n}"],"names":[],"mappings":";;;;;AAGA;AAHA;AACA;AADA;AAEA;AAFA;AAEA;;;;;;AAGO,MAAM,SAAS,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE;IACjC,QAAQ;QAAC,gKAAA,CAAA,OAAI;KAAC;IACd,YAAY;QACV,CAAC,gKAAA,CAAA,OAAI,CAAC,EAAE,CAAC,EAAE,CAAA,GAAA,gKAAA,CAAA,OAAI,AAAD;IAChB;IACA,YAAY;QAAC,CAAA,GAAA,mHAAA,CAAA,iBAAc,AAAD;KAAI;AAChC;AAEA,MAAM,cAAc,IAAI,gLAAA,CAAA,cAAW;AAEpB,SAAS,SAAS,EAAE,QAAQ,EAAiC;IAC1E,qBACE,6LAAC,kJAAA,CAAA,gBAAa;QAAC,QAAQ;kBACrB,cAAA,6LAAC,yLAAA,CAAA,sBAAmB;YAAC,QAAQ;sBAAc;;;;;;;;;;;AAGjD;KANwB"}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}